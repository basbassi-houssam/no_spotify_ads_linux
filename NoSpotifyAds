#!/bin/bash

# Spotify Ad Muter Script - Clean Version
# Automatically mutes Spotify's audio during advertisements
# Focused solely on Spotify - no interference with other audio systems

# Configuration
SPOTIFY_PROCESS="spotify"
CHECK_INTERVAL=1
LOG_FILE="/tmp/spotify-ad-muter.log"
MUTE_STATE_FILE="/tmp/spotify_muted"
ORIGINAL_VOLUME_FILE="/tmp/spotify_original_volume"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Simple logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to check if Spotify is running
is_spotify_running() {
    pgrep -x "$SPOTIFY_PROCESS" > /dev/null
}

# Function to get Spotify's PulseAudio sink input ID
get_spotify_sink_input() {
    pactl list sink-inputs 2>/dev/null | grep -B20 -A5 "application.name.*Spotify" | grep "Sink Input #" | head -1 | sed 's/Sink Input #//'
}

# Function to get current Spotify volume
get_spotify_volume() {
    local sink_input
    sink_input=$(get_spotify_sink_input)
    if [[ -n "$sink_input" ]]; then
        pactl list sink-inputs 2>/dev/null | grep -A15 "Sink Input #$sink_input" | grep "Volume:" | head -1 | sed 's/.*front-left: [0-9]* *\/ *\([0-9]*\)%.*/\1/'
    fi
}

# Function to set Spotify volume (PulseAudio only)
set_spotify_volume() {
    local volume="$1"
    local sink_input
    sink_input=$(get_spotify_sink_input)
    if [[ -n "$sink_input" ]]; then
        pactl set-sink-input-volume "$sink_input" "${volume}%" 2>/dev/null
        return $?
    fi
    return 1
}

# Function to mute Spotify audio only
mute_spotify_audio() {
    if [[ ! -f "$MUTE_STATE_FILE" ]]; then
        local current_volume
        current_volume=$(get_spotify_volume)
        if [[ -n "$current_volume" && "$current_volume" -gt 0 ]]; then
            echo "$current_volume" > "$ORIGINAL_VOLUME_FILE"
            
            if set_spotify_volume 0; then
                touch "$MUTE_STATE_FILE"
                echo -e "${RED}ðŸ”‡ MUTED: Advertisement audio muted${NC}"
                log "MUTED: Advertisement detected - audio muted, volume was $current_volume%"
                return 0
            fi
        fi
    fi
    return 1
}

# Function to unmute Spotify audio
unmute_spotify_audio() {
    if [[ -f "$MUTE_STATE_FILE" ]]; then
        local original_volume="50"
        
        if [[ -f "$ORIGINAL_VOLUME_FILE" ]]; then
            original_volume=$(cat "$ORIGINAL_VOLUME_FILE")
            rm -f "$ORIGINAL_VOLUME_FILE"
        fi
        
        if set_spotify_volume "$original_volume"; then
            rm -f "$MUTE_STATE_FILE"
            echo -e "${GREEN}ðŸ”Š UNMUTED: Music audio restored (${original_volume}%)${NC}"
            log "UNMUTED: Music resumed - volume restored to $original_volume%"
            return 0
        fi
    fi
    return 1
}

# Function to get current track info using playerctl (Spotify only)
get_spotify_info() {
    local title artist album url
    title=$(playerctl --player=spotify metadata --format "{{title}}" 2>/dev/null || echo "")
    artist=$(playerctl --player=spotify metadata --format "{{artist}}" 2>/dev/null || echo "")
    album=$(playerctl --player=spotify metadata --format "{{album}}" 2>/dev/null || echo "")
    url=$(playerctl --player=spotify metadata --format "{{mpris:trackid}}" 2>/dev/null || echo "")
    
    echo "${title}|${artist}|${album}|${url}"
}

# Function to get Spotify status
get_spotify_status() {
    playerctl --player=spotify status 2>/dev/null
}

# Function to get track duration in seconds
get_track_duration() {
    local duration_microseconds
    duration_microseconds=$(playerctl --player=spotify metadata --format "{{mpris:length}}" 2>/dev/null)
    if [[ -n "$duration_microseconds" && "$duration_microseconds" -gt 0 ]]; then
        echo $((duration_microseconds / 1000000))
    else
        echo "0"
    fi
}

# Function to detect if current track is an advertisement
is_advertisement() {
    local info="$1"
    local title artist album url
    
    IFS='|' read -r title artist album url <<< "$info"
    
    # Check for Spotify ad URL patterns
    if [[ "$url" == *"spotify:ad:"* ]] || [[ "$url" == *":ad:"* ]]; then
        return 0
    fi
    
    # Common ad detection patterns (case insensitive)
    local title_lower="${title,,}"
    local artist_lower="${artist,,}"
    
    # Advertisement title patterns
    if [[ "$title_lower" == *"advertisement"* ]] || \
       [[ "$title_lower" == *"spotify ad"* ]] || \
       [[ "$title_lower" == *"audio ad"* ]] || \
       [[ "$title_lower" == "spotify" ]] || \
       [[ "$title_lower" == *"promotion"* ]] || \
       [[ "$title_lower" == *"commercial"* ]]; then
        return 0
    fi
    
    # Advertisement artist patterns
    if [[ "$artist_lower" == "spotify" ]] || \
       [[ "$artist_lower" == *"spotify ad"* ]] || \
       [[ "$artist_lower" == *"advertisement"* ]]; then
        return 0
    fi
    
    # Check for empty or very short metadata
    if [[ -z "$title" && -z "$artist" ]]; then
        return 0
    fi
    
    if [[ ${#title} -le 2 && ${#artist} -le 2 ]]; then
        return 0
    fi
    
    # Check track duration (ads are typically 15-30 seconds)
    local duration
    duration=$(get_track_duration)
    if [[ "$duration" -gt 0 && "$duration" -le 35 ]]; then
        if [[ -z "$album" ]] || [[ "${album,,}" == "spotify" ]]; then
            return 0
        fi
    fi
    
    return 1
}

# Function to show current status
show_status() {
    local info="$1"
    local title artist album
    
    IFS='|' read -r title artist album _ <<< "$info"
    
    if is_advertisement "$info"; then
        echo -e "${RED}ðŸš« AD: ${title:-Advertisement}${NC}"
    else
        echo -e "${GREEN}ðŸŽµ MUSIC: ${title:-Unknown} - ${artist:-Unknown Artist}${NC}"
    fi
}

# Function to wait for Spotify to start
wait_for_spotify() {
    echo -e "${YELLOW}Waiting for Spotify to start...${NC}"
    
    while ! is_spotify_running; do
        sleep 2
    done
    
    echo -e "${GREEN}âœ“ Spotify detected${NC}"
    
    # Wait for Spotify to initialize
    local retries=0
    while [[ $retries -lt 5 ]]; do
        local info
        info=$(get_spotify_info)
        if [[ -n "$info" && "$info" != "|||" ]]; then
            echo -e "${GREEN}âœ“ Spotify ready${NC}"
            break
        fi
        sleep 2
        ((retries++))
    done
}

# Cleanup function
cleanup() {
    echo -e "\n${YELLOW}Cleaning up...${NC}"
    if [[ -f "$MUTE_STATE_FILE" ]]; then
        unmute_spotify_audio
    fi
    rm -f "$MUTE_STATE_FILE" "$ORIGINAL_VOLUME_FILE"
    log "Script terminated"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Main function
main() {
    echo -e "${BLUE}Spotify Ad Muter - Clean Version${NC}"
    echo -e "${BLUE}Mutes Spotify audio during advertisements only${NC}"
    echo
    
    # Check dependencies
    if ! command -v playerctl >/dev/null 2>&1; then
        echo -e "${RED}Error: playerctl is required${NC}"
        echo "Install: sudo apt install playerctl"
        exit 1
    fi
    
    if ! command -v pactl >/dev/null 2>&1; then
        echo -e "${RED}Error: pactl (PulseAudio) is required${NC}"
        echo "Install: sudo apt install pulseaudio-utils"
        exit 1
    fi
    
    # Wait for Spotify if needed
    if ! is_spotify_running; then
        wait_for_spotify
    else
        echo -e "${GREEN}âœ“ Spotify is running${NC}"
    fi
    
    log "Script started"
    
    local last_track=""
    local last_status=""
    local is_muted=false
    
    # Clean up old state files
    rm -f "$MUTE_STATE_FILE" "$ORIGINAL_VOLUME_FILE"
    
    echo -e "${BLUE}Monitoring Spotify for advertisements...${NC}"
    echo -e "${YELLOW}Press Ctrl+C to stop${NC}"
    echo
    
    while true; do
        if is_spotify_running; then
            local current_info
            current_info=$(get_spotify_info)
            local status
            status=$(get_spotify_status)
            
            if [[ -n "$current_info" && "$current_info" != "|||" ]]; then
                # Track or status changed - show status and check for ads
                if [[ "$current_info" != "$last_track" ]] || [[ "$status" != "$last_status" ]]; then
                    if [[ "$status" == "Playing" ]]; then
                        show_status "$current_info"
                    fi
                    last_track="$current_info"
                    last_status="$status"
                fi
                
                if [[ "$status" == "Playing" ]]; then
                    # Currently playing - check if it's an ad and handle muting
                    if is_advertisement "$current_info"; then
                        if [[ "$is_muted" == false ]]; then
                            if mute_spotify_audio; then
                                is_muted=true
                            fi
                        fi
                    else
                        if [[ "$is_muted" == true ]]; then
                            if unmute_spotify_audio; then
                                is_muted=false
                            fi
                        fi
                    fi
                else
                    # Not playing (paused/stopped) - unmute if currently muted
                    if [[ "$is_muted" == true ]]; then
                        unmute_spotify_audio
                        is_muted=false
                        if [[ "$status" == "Paused" ]]; then
                            echo -e "${YELLOW}Spotify paused - audio restored${NC}"
                        fi
                    fi
                fi
            fi
        else
            if [[ "$is_muted" == true ]]; then
                unmute_spotify_audio
                is_muted=false
            fi
            
            echo -e "${YELLOW}Spotify stopped - waiting for restart...${NC}"
            log "Spotify stopped - waiting for restart"
            
            last_track=""
            last_status=""
            wait_for_spotify
            log "Spotify restarted"
        fi
        
        sleep "$CHECK_INTERVAL"
    done
}

# Show usage
show_usage() {
    echo "Spotify Ad Muter - Clean Version"
    echo
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -i, --interval Set check interval in seconds (default: 1)"
    echo "  -l, --log      Show log file location and recent entries"
    echo "  -s, --status   Show current Spotify status"
    echo "  -t, --test     Test advertisement detection on current track"
    echo "  -v, --volume   Show current Spotify volume info"
    echo
    echo "Dependencies:"
    echo "  - playerctl (for Spotify control)"
    echo "  - pactl (for Spotify-specific audio control)"
    echo
    echo "How it works:"
    echo "  This script mutes only Spotify's audio during advertisements"
    echo "  while letting the ads continue playing in the background."
    echo "  When music resumes, audio is automatically restored."
    echo
    echo "Examples:"
    echo "  $0              # Start monitoring"
    echo "  $0 -i 2         # Check every 2 seconds"
    echo "  $0 --status     # Show current status"
    echo "  $0 --volume     # Show Spotify volume info"
}

# Test advertisement detection
test_ad_detection() {
    echo "Testing advertisement detection on current Spotify track..."
    echo
    
    if ! is_spotify_running; then
        echo "Spotify is not running"
        exit 1
    fi
    
    local info
    info=$(get_spotify_info)
    local status
    status=$(get_spotify_status)
    
    echo "Current track info:"
    local title artist album url
    IFS='|' read -r title artist album url <<< "$info"
    
    echo "  Title: ${title:-<empty>}"
    echo "  Artist: ${artist:-<empty>}"
    echo "  Album: ${album:-<empty>}"
    echo "  URL: ${url:-<empty>}"
    echo "  Status: $status"
    echo "  Duration: $(get_track_duration) seconds"
    echo "  Spotify Volume: $(get_spotify_volume)%"
    echo
    
    if is_advertisement "$info"; then
        echo -e "${RED}ðŸš« DETECTED AS: Advertisement${NC}"
    else
        echo -e "${GREEN}ðŸŽµ DETECTED AS: Music${NC}"
    fi
}

# Show volume information
show_volume_info() {
    if ! is_spotify_running; then
        echo "Spotify is not running"
        exit 1
    fi
    
    echo "Spotify Volume Information:"
    
    local sink_input
    sink_input=$(get_spotify_sink_input)
    if [[ -n "$sink_input" ]]; then
        echo "  Spotify Sink Input ID: $sink_input"
        echo "  Current Volume: $(get_spotify_volume)%"
    else
        echo "  Spotify audio sink not found"
    fi
    
    if [[ -f "$MUTE_STATE_FILE" ]]; then
        echo "  Status: Currently muted by ad blocker"
        if [[ -f "$ORIGINAL_VOLUME_FILE" ]]; then
            echo "  Original Volume: $(cat "$ORIGINAL_VOLUME_FILE")%"
        fi
    else
        echo "  Status: Not muted by ad blocker"
    fi
}

# Command line argument handling
case "${1:-}" in
    -h|--help)
        show_usage
        exit 0
        ;;
    -i|--interval)
        if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]] && [[ "$2" -gt 0 ]]; then
            CHECK_INTERVAL="$2"
            echo "Set check interval to $CHECK_INTERVAL seconds"
            main
        else
            echo "Error: Invalid interval value (must be positive integer)"
            exit 1
        fi
        ;;
    -l|--log)
        echo "Log file: $LOG_FILE"
        if [[ -f "$LOG_FILE" ]]; then
            echo "Recent entries:"
            tail -10 "$LOG_FILE"
        else
            echo "No log file found yet"
        fi
        exit 0
        ;;
    -s|--status)
        if is_spotify_running; then
            info=$(get_spotify_info)
            status=$(get_spotify_status)
            show_status "$info"
            echo "Playback Status: $status"
        else
            echo "Spotify is not running"
        fi
        exit 0
        ;;
    -t|--test)
        test_ad_detection
        exit 0
        ;;
    -v|--volume)
        show_volume_info
        exit 0
        ;;
    "")
        main
        ;;
    *)
        echo "Unknown option: $1"
        show_usage
        exit 1
        ;;
esac

#!/bin/bash

# Spotify Ad Muter Script (Audio-Only Muting Version)
# Automatically mutes Spotify's audio during advertisements while letting them play

# Configuration
SPOTIFY_PROCESS="spotify"
CHECK_INTERVAL=1  # Check every 1 second for better responsiveness
LOG_FILE="/tmp/spotify-ad-muter.log"
MUTE_STATE_FILE="/tmp/spotify_muted"
ORIGINAL_VOLUME_FILE="/tmp/spotify_original_volume"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to check if Spotify is running
is_spotify_running() {
    pgrep -x "$SPOTIFY_PROCESS" > /dev/null
}

# Function to get Spotify's PulseAudio sink input ID
get_spotify_sink_input() {
    pactl list sink-inputs | grep -B20 -A5 "application.name.*Spotify" | grep "Sink Input #" | head -1 | sed 's/Sink Input #//'
}

# Function to get current Spotify volume
get_spotify_volume() {
    local sink_input
    sink_input=$(get_spotify_sink_input)
    if [[ -n "$sink_input" ]]; then
        pactl list sink-inputs | grep -A15 "Sink Input #$sink_input" | grep "Volume:" | head -1 | sed 's/.*front-left: [0-9]* *\/ *\([0-9]*\)%.*/\1/'
    fi
}

# Function to set Spotify volume
set_spotify_volume() {
    local volume="$1"
    local sink_input
    sink_input=$(get_spotify_sink_input)
    if [[ -n "$sink_input" ]]; then
        pactl set-sink-input-volume "$sink_input" "${volume}%" 2>/dev/null
        return $?
    fi
    return 1
}

# Function to mute Spotify audio only
mute_spotify_audio() {
    if [[ ! -f "$MUTE_STATE_FILE" ]]; then
        # Save current volume
        local current_volume
        current_volume=$(get_spotify_volume)
        if [[ -n "$current_volume" && "$current_volume" -gt 0 ]]; then
            echo "$current_volume" > "$ORIGINAL_VOLUME_FILE"
            
            # Mute by setting volume to 0
            if set_spotify_volume 0; then
                touch "$MUTE_STATE_FILE"
                echo -e "${RED}ðŸ”‡ MUTED: Advertisement audio muted (ad still playing)${NC}"
                log "MUTED: Advertisement detected - audio muted, volume was $current_volume%"
                return 0
            fi
        fi
    fi
    return 1
}

# Function to unmute Spotify audio
unmute_spotify_audio() {
    if [[ -f "$MUTE_STATE_FILE" ]]; then
        local original_volume="50"  # Default fallback
        
        # Restore original volume
        if [[ -f "$ORIGINAL_VOLUME_FILE" ]]; then
            original_volume=$(cat "$ORIGINAL_VOLUME_FILE")
            rm -f "$ORIGINAL_VOLUME_FILE"
        fi
        
        if set_spotify_volume "$original_volume"; then
            rm -f "$MUTE_STATE_FILE"
            echo -e "${GREEN}ðŸ”Š UNMUTED: Music audio restored (${original_volume}%)${NC}"
            log "UNMUTED: Music resumed - volume restored to $original_volume%"
            return 0
        fi
    fi
    return 1
}

# Alternative muting method using amixer (fallback)
mute_spotify_amixer() {
    if [[ ! -f "$MUTE_STATE_FILE" ]]; then
        # Get current master volume
        local current_volume
        current_volume=$(amixer get Master | grep -oP '\d+(?=%)' | head -1)
        
        if [[ -n "$current_volume" ]]; then
            echo "$current_volume" > "$ORIGINAL_VOLUME_FILE"
            
            # Mute master (less precise but works as fallback)
            if amixer -q sset Master 0%; then
                touch "$MUTE_STATE_FILE"
                echo -e "${RED}ðŸ”‡ MUTED: System audio muted during ad (fallback method)${NC}"
                log "MUTED: Advertisement detected - system audio muted (fallback), volume was $current_volume%"
                return 0
            fi
        fi
    fi
    return 1
}

# Alternative unmuting method using amixer (fallback)
unmute_spotify_amixer() {
    if [[ -f "$MUTE_STATE_FILE" ]]; then
        local original_volume="50"  # Default fallback
        
        if [[ -f "$ORIGINAL_VOLUME_FILE" ]]; then
            original_volume=$(cat "$ORIGINAL_VOLUME_FILE")
            rm -f "$ORIGINAL_VOLUME_FILE"
        fi
        
        if amixer -q sset Master "${original_volume}%"; then
            rm -f "$MUTE_STATE_FILE"
            echo -e "${GREEN}ðŸ”Š UNMUTED: System audio restored (${original_volume}%)${NC}"
            log "UNMUTED: Music resumed - system volume restored to $original_volume%"
            return 0
        fi
    fi
    return 1
}

# Function to get current track info using playerctl
get_spotify_info() {
    local title artist album url
    title=$(playerctl --player=spotify metadata --format "{{title}}" 2>/dev/null || echo "")
    artist=$(playerctl --player=spotify metadata --format "{{artist}}" 2>/dev/null || echo "")
    album=$(playerctl --player=spotify metadata --format "{{album}}" 2>/dev/null || echo "")
    url=$(playerctl --player=spotify metadata --format "{{mpris:trackid}}" 2>/dev/null || echo "")
    
    echo "${title}|${artist}|${album}|${url}"
}

# Function to get Spotify status
get_spotify_status() {
    playerctl --player=spotify status 2>/dev/null
}

# Function to get track duration in seconds
get_track_duration() {
    local duration_microseconds
    duration_microseconds=$(playerctl --player=spotify metadata --format "{{mpris:length}}" 2>/dev/null)
    if [[ -n "$duration_microseconds" && "$duration_microseconds" -gt 0 ]]; then
        echo $((duration_microseconds / 1000000))
    else
        echo "0"
    fi
}

# Enhanced function to detect if current track is an advertisement
is_advertisement() {
    local info="$1"
    local title artist album url
    
    IFS='|' read -r title artist album url <<< "$info"
    
    # Check for Spotify ad URL patterns
    if [[ "$url" == *"spotify:ad:"* ]] || [[ "$url" == *":ad:"* ]]; then
        return 0  # Definitely an advertisement
    fi
    
    # Common ad detection patterns (case insensitive)
    local title_lower="${title,,}"
    local artist_lower="${artist,,}"
    
    # Advertisement title patterns
    if [[ "$title_lower" == *"advertisement"* ]] || \
       [[ "$title_lower" == *"spotify ad"* ]] || \
       [[ "$title_lower" == *"audio ad"* ]] || \
       [[ "$title_lower" == "spotify" ]] || \
       [[ "$title_lower" == *"promotion"* ]] || \
       [[ "$title_lower" == *"commercial"* ]]; then
        return 0
    fi
    
    # Advertisement artist patterns
    if [[ "$artist_lower" == "spotify" ]] || \
       [[ "$artist_lower" == *"spotify ad"* ]] || \
       [[ "$artist_lower" == *"advertisement"* ]]; then
        return 0
    fi
    
    # Check for empty or very short metadata (common with ads)
    if [[ -z "$title" && -z "$artist" ]]; then
        return 0
    fi
    
    if [[ ${#title} -le 2 && ${#artist} -le 2 ]]; then
        return 0
    fi
    
    # Check track duration (ads are typically 15-30 seconds)
    local duration
    duration=$(get_track_duration)
    if [[ "$duration" -gt 0 && "$duration" -le 35 ]]; then
        # Additional check: if it's short AND has suspicious metadata
        if [[ -z "$album" ]] || [[ "$album_lower" == "spotify" ]]; then
            return 0
        fi
    fi
    
    # Check for generic/placeholder titles that might indicate ads
    local generic_patterns=("track" "audio" "untitled" "unknown")
    for pattern in "${generic_patterns[@]}"; do
        if [[ "$title_lower" == "$pattern" && -z "$artist" ]]; then
            return 0
        fi
    done
    
    return 1  # Not an advertisement
}

# Function to show current status
show_status() {
    local info="$1"
    local status="$2"
    local title artist album
    
    IFS='|' read -r title artist album _ <<< "$info"
    
    if is_advertisement "$info"; then
        echo -e "${RED}ðŸš« AD: ${title:-Unknown Advertisement}${NC}"
        if [[ -f "$MUTE_STATE_FILE" ]]; then
            echo -e "   ${RED}ðŸ”‡ Audio muted (ad playing silently)${NC}"
        fi
    else
        echo -e "${GREEN}ðŸŽµ MUSIC: ${title:-Unknown} - ${artist:-Unknown Artist}${NC}"
        if [[ -n "$album" && "$album" != "$title" ]]; then
            echo -e "   ${BLUE}Album: $album${NC}"
        fi
        if [[ -f "$MUTE_STATE_FILE" ]]; then
            echo -e "   ${GREEN}ðŸ”Š Audio restored${NC}"
        fi
    fi
    
    # Show duration if available
    local duration
    duration=$(get_track_duration)
    if [[ "$duration" -gt 0 ]]; then
        local minutes=$((duration / 60))
        local seconds=$((duration % 60))
        echo -e "   ${YELLOW}Duration: ${minutes}:$(printf "%02d" $seconds)${NC}"
    fi
}

# Cleanup function
cleanup() {
    echo -e "\n${YELLOW}Cleaning up...${NC}"
    if [[ -f "$MUTE_STATE_FILE" ]]; then
        if command -v pactl >/dev/null 2>&1; then
            unmute_spotify_audio
        else
            unmute_spotify_amixer
        fi
    fi
    # Clean up temp files
    rm -f "$MUTE_STATE_FILE" "$ORIGINAL_VOLUME_FILE"
    log "Script terminated"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Main function
main() {
    echo -e "${BLUE}Starting Spotify Ad Muter (Audio Muting Version)...${NC}"
    echo -e "${BLUE}This version mutes Spotify's audio during ads while letting them complete${NC}"
    log "Script started"
    
    # Check dependencies
    if ! command -v playerctl >/dev/null 2>&1; then
        echo -e "${RED}Error: playerctl is required but not installed${NC}"
        echo "Install it with:"
        echo "  Ubuntu/Debian: sudo apt install playerctl"
        echo "  Fedora: sudo dnf install playerctl"
        echo "  Arch: sudo pacman -S playerctl"
        exit 1
    fi
    
    # Check audio control dependencies
    local audio_method=""
    if command -v pactl >/dev/null 2>&1; then
        audio_method="pulseaudio"
        echo -e "${GREEN}Using PulseAudio (pactl) for precise Spotify audio control${NC}"
    elif command -v amixer >/dev/null 2>&1; then
        audio_method="alsa"
        echo -e "${YELLOW}Using ALSA (amixer) for system-wide audio control (fallback)${NC}"
    else
        echo -e "${RED}Error: Neither pactl nor amixer found${NC}"
        echo "Install PulseAudio tools: sudo apt install pulseaudio-utils"
        echo "Or ALSA tools: sudo apt install alsa-utils"
        exit 1
    fi
    
    local last_track=""
    local is_muted=false
    local last_check_time=0
    
    # Remove old state files
    rm -f "$MUTE_STATE_FILE" "$ORIGINAL_VOLUME_FILE"
    
    echo -e "${BLUE}Monitoring Spotify for advertisements...${NC}"
    echo -e "${YELLOW}Press Ctrl+C to stop${NC}"
    echo
    
    while true; do
        if is_spotify_running; then
            local current_info
            current_info=$(get_spotify_info)
            local status
            status=$(get_spotify_status)
            
            # Only process if we have valid track info and Spotify is playing
            if [[ -n "$current_info" && "$current_info" != "|||" && "$status" == "Playing" ]]; then
                # Check if track changed or if we need to recheck
                local current_time
                current_time=$(date +%s)
                
                if [[ "$current_info" != "$last_track" ]] || [[ $((current_time - last_check_time)) -gt 5 ]]; then
                    show_status "$current_info" "$status"
                    last_track="$current_info"
                    last_check_time="$current_time"
                    
                    if is_advertisement "$current_info"; then
                        if [[ "$is_muted" == false ]]; then
                            # Mute audio but let ad continue playing
                            if [[ "$audio_method" == "pulseaudio" ]]; then
                                if mute_spotify_audio; then
                                    is_muted=true
                                fi
                            else
                                if mute_spotify_amixer; then
                                    is_muted=true
                                fi
                            fi
                        fi
                    else
                        if [[ "$is_muted" == true ]]; then
                            # Unmute audio for music
                            if [[ "$audio_method" == "pulseaudio" ]]; then
                                if unmute_spotify_audio; then
                                    is_muted=false
                                fi
                            else
                                if unmute_spotify_amixer; then
                                    is_muted=false
                                fi
                            fi
                        fi
                    fi
                fi
            elif [[ "$status" != "Playing" ]] && [[ "$is_muted" == true ]]; then
                # If Spotify is paused/stopped and we had muted it, unmute
                if [[ "$audio_method" == "pulseaudio" ]]; then
                    unmute_spotify_audio
                else
                    unmute_spotify_amixer
                fi
                is_muted=false
                echo -e "${YELLOW}Spotify paused/stopped - audio restored${NC}"
            fi
        else
            if [[ "$is_muted" == true ]]; then
                if [[ "$audio_method" == "pulseaudio" ]]; then
                    unmute_spotify_audio
                else
                    unmute_spotify_amixer
                fi
                is_muted=false
            fi
            echo -e "${YELLOW}Waiting for Spotify...${NC}"
            sleep 5
            continue
        fi
        
        sleep "$CHECK_INTERVAL"
    done
}

# Show usage
show_usage() {
    echo "Spotify Ad Muter (Audio Muting Version) - Mutes Spotify audio during ads"
    echo
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -i, --interval Set check interval in seconds (default: 1)"
    echo "  -l, --log      Show log file location and recent entries"
    echo "  -s, --status   Show current Spotify status"
    echo "  -t, --test     Test advertisement detection on current track"
    echo "  -v, --volume   Show current Spotify volume info"
    echo
    echo "Dependencies:"
    echo "  - playerctl (for Spotify control)"
    echo "  - pactl (preferred) or amixer (fallback) for audio control"
    echo
    echo "How it works:"
    echo "  This script mutes Spotify's audio output during advertisements"
    echo "  while letting the ads continue playing in the background."
    echo "  When music resumes, audio is automatically restored."
    echo
    echo "Examples:"
    echo "  $0              # Start with default settings"
    echo "  $0 -i 2         # Check every 2 seconds"
    echo "  $0 --status     # Show current status"
    echo "  $0 --volume     # Show volume info"
}

# Test advertisement detection
test_ad_detection() {
    echo "Testing advertisement detection on current Spotify track..."
    echo
    
    if ! is_spotify_running; then
        echo "Spotify is not running"
        exit 1
    fi
    
    local info
    info=$(get_spotify_info)
    local status
    status=$(get_spotify_status)
    
    echo "Current track info:"
    local title artist album url
    IFS='|' read -r title artist album url <<< "$info"
    
    echo "  Title: ${title:-<empty>}"
    echo "  Artist: ${artist:-<empty>}"
    echo "  Album: ${album:-<empty>}"
    echo "  URL: ${url:-<empty>}"
    echo "  Status: $status"
    echo "  Duration: $(get_track_duration) seconds"
    
    if command -v pactl >/dev/null 2>&1; then
        echo "  Spotify Volume: $(get_spotify_volume)%"
    fi
    
    echo
    
    if is_advertisement "$info"; then
        echo -e "${RED}ðŸš« DETECTED AS: Advertisement${NC}"
    else
        echo -e "${GREEN}ðŸŽµ DETECTED AS: Music${NC}"
    fi
}

# Show volume information
show_volume_info() {
    if ! is_spotify_running; then
        echo "Spotify is not running"
        exit 1
    fi
    
    echo "Spotify Volume Information:"
    
    if command -v pactl >/dev/null 2>&1; then
        local sink_input
        sink_input=$(get_spotify_sink_input)
        if [[ -n "$sink_input" ]]; then
            echo "  Spotify Sink Input ID: $sink_input"
            echo "  Current Volume: $(get_spotify_volume)%"
        else
            echo "  Spotify audio sink not found"
        fi
    fi
    
    if command -v amixer >/dev/null 2>&1; then
        echo "  Master Volume: $(amixer get Master | grep -oP '\d+(?=%)' | head -1)%"
    fi
    
    if [[ -f "$MUTE_STATE_FILE" ]]; then
        echo "  Status: Currently muted by ad blocker"
        if [[ -f "$ORIGINAL_VOLUME_FILE" ]]; then
            echo "  Original Volume: $(cat "$ORIGINAL_VOLUME_FILE")%"
        fi
    else
        echo "  Status: Not muted by ad blocker"
    fi
}

# Command line argument handling
case "${1:-}" in
    -h|--help)
        show_usage
        exit 0
        ;;
    -i|--interval)
        if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]] && [[ "$2" -gt 0 ]]; then
            CHECK_INTERVAL="$2"
            echo "Set check interval to $CHECK_INTERVAL seconds"
            shift 2
        else
            echo "Error: Invalid interval value (must be positive integer)"
            exit 1
        fi
        ;;
    -l|--log)
        echo "Log file: $LOG_FILE"
        if [[ -f "$LOG_FILE" ]]; then
            echo "Recent entries:"
            tail -10 "$LOG_FILE"
        else
            echo "No log file found yet"
        fi
        exit 0
        ;;
    -s|--status)
        if is_spotify_running; then
            info=$(get_spotify_info)
            status=$(get_spotify_status)
            show_status "$info" "$status"
            echo "Playback Status: $status"
        else
            echo "Spotify is not running"
        fi
        exit 0
        ;;
    -t|--test)
        test_ad_detection
        exit 0
        ;;
    -v|--volume)
        show_volume_info
        exit 0
        ;;
    "")
        main
        ;;
    *)
        echo "Unknown option: $1"
        show_usage
        exit 1
        ;;
esac

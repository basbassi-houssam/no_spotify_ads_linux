#!/bin/bash

# Spotify Monitor and Ad Blocker Manager
# Automatically starts/stops NoSpotifyAds when Spotify starts/stops

# Configuration
SPOTIFY_PROCESS="spotify"
CHECK_INTERVAL=3  # Check every 3 seconds
AD_BLOCKER_SCRIPT="$(dirname "$0")/NoSpotifyAds"  # Assumes in same directory
LOG_FILE="/tmp/spotify-monitor.log"
PID_FILE="/tmp/spotify-ad-blocker.pid"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [MONITOR] - $1" | tee -a "$LOG_FILE"
}

# Function to check if Spotify is running
is_spotify_running() {
    pgrep -x "$SPOTIFY_PROCESS" > /dev/null
}

# Function to check if ad blocker is running
is_ad_blocker_running() {
    if [[ -f "$PID_FILE" ]]; then
        local pid
        pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            # Verify it's actually our ad blocker script
            if ps -p "$pid" -o cmd= | grep -q "NoSpotifyAds"; then
                return 0
            fi
        fi
        # PID file exists but process doesn't, clean it up
        rm -f "$PID_FILE"
    fi
    return 1
}

# Function to start the ad blocker
start_ad_blocker() {
    if [[ ! -f "$AD_BLOCKER_SCRIPT" ]]; then
        echo -e "${RED}Error: Ad blocker script not found at: $AD_BLOCKER_SCRIPT${NC}"
        log "ERROR: Ad blocker script not found at: $AD_BLOCKER_SCRIPT"
        return 1
    fi
    
    if ! is_ad_blocker_running; then
        echo -e "${GREEN}🚀 Starting Spotify Ad Blocker...${NC}"
        log "Starting ad blocker"
        
        # Make sure script is executable
        chmod +x "$AD_BLOCKER_SCRIPT"
        
        # Start ad blocker in background and save PID
        nohup "$AD_BLOCKER_SCRIPT" >> "$LOG_FILE" 2>&1 &
        local ad_blocker_pid=$!
        echo "$ad_blocker_pid" > "$PID_FILE"
        
        # Wait a moment and verify it started successfully
        sleep 2
        if ps -p "$ad_blocker_pid" > /dev/null 2>&1; then
            echo -e "${GREEN}✓ Ad blocker started successfully (PID: $ad_blocker_pid)${NC}"
            log "Ad blocker started successfully (PID: $ad_blocker_pid)"
            return 0
        else
            echo -e "${RED}✗ Failed to start ad blocker${NC}"
            log "ERROR: Failed to start ad blocker"
            rm -f "$PID_FILE"
            return 1
        fi
    else
        echo -e "${YELLOW}Ad blocker is already running${NC}"
        return 0
    fi
}

# Function to stop the ad blocker
stop_ad_blocker() {
    if is_ad_blocker_running; then
        local pid
        pid=$(cat "$PID_FILE")
        echo -e "${YELLOW}🛑 Stopping Spotify Ad Blocker...${NC}"
        log "Stopping ad blocker (PID: $pid)"
        
        # Send SIGTERM first (graceful shutdown)
        kill -TERM "$pid" 2>/dev/null
        
        # Wait up to 5 seconds for graceful shutdown
        local count=0
        while ps -p "$pid" > /dev/null 2>&1 && [[ $count -lt 5 ]]; do
            sleep 1
            ((count++))
        done
        
        # If still running, force kill
        if ps -p "$pid" > /dev/null 2>&1; then
            echo -e "${RED}Force killing ad blocker...${NC}"
            kill -KILL "$pid" 2>/dev/null
            sleep 1
        fi
        
        # Clean up
        rm -f "$PID_FILE"
        
        # Clean up any mute states left by ad blocker
        rm -f /tmp/spotify_muted /tmp/spotify_original_volume
        
        echo -e "${GREEN}✓ Ad blocker stopped${NC}"
        log "Ad blocker stopped successfully"
        return 0
    else
        echo -e "${YELLOW}Ad blocker is not running${NC}"
        return 0
    fi
}

# Function to show current status
show_status() {
    echo "=== Spotify Monitor Status ==="
    
    if is_spotify_running; then
        echo -e "${GREEN}🎵 Spotify: Running${NC}"
        # Try to get current track if playerctl is available
        if command -v playerctl >/dev/null 2>&1; then
            local current_track
            current_track=$(playerctl --player=spotify metadata --format "{{title}} - {{artist}}" 2>/dev/null)
            if [[ -n "$current_track" && "$current_track" != " - " ]]; then
                echo -e "   Current: $current_track"
            fi
        fi
    else
        echo -e "${RED}🎵 Spotify: Not running${NC}"
    fi
    
    if is_ad_blocker_running; then
        local pid
        pid=$(cat "$PID_FILE")
        echo -e "${GREEN}🛡️  Ad Blocker: Running (PID: $pid)${NC}"
        
        # Check if currently muting
        if [[ -f "/tmp/spotify_muted" ]]; then
            echo -e "${BLUE}   Status: Currently muting advertisement${NC}"
        else
            echo -e "${BLUE}   Status: Monitoring for ads${NC}"
        fi
    else
        echo -e "${RED}🛡️  Ad Blocker: Not running${NC}"
    fi
    
    echo -e "${BLUE}Monitor: Active (PID: $$)${NC}"
    echo -e "Log file: $LOG_FILE"
}

# Cleanup function
cleanup() {
    echo -e "\n${YELLOW}Shutting down Spotify Monitor...${NC}"
    log "Monitor shutting down"
    
    # Stop ad blocker if running
    stop_ad_blocker
    
    # Clean up any remaining files
    rm -f /tmp/spotify-monitor.pid
    
    log "Monitor stopped"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Function to create systemd service (optional)
create_systemd_service() {
    local service_file="$HOME/.config/systemd/user/spotify-monitor.service"
    local script_path="$(realpath "$0")"
    
    mkdir -p "$(dirname "$service_file")"
    
    cat > "$service_file" << EOF
[Unit]
Description=Spotify Monitor and Ad Blocker Manager
After=graphical-session.target

[Service]
Type=simple
ExecStart=$script_path --daemon
Restart=on-failure
RestartSec=10
Environment=DISPLAY=:0

[Install]
WantedBy=default.target
EOF
    
    echo -e "${GREEN}Systemd service created at: $service_file${NC}"
    echo -e "${YELLOW}To enable auto-start:${NC}"
    echo "  systemctl --user daemon-reload"
    echo "  systemctl --user enable spotify-monitor.service"
    echo "  systemctl --user start spotify-monitor.service"
    echo
    echo -e "${YELLOW}To disable auto-start:${NC}"
    echo "  systemctl --user stop spotify-monitor.service"
    echo "  systemctl --user disable spotify-monitor.service"
}

# Main monitoring loop
monitor_spotify() {
    local spotify_was_running=false
    local last_status_time=0
    
    log "Spotify monitor started"
    echo -e "${BLUE}🎯 Starting Spotify Monitor...${NC}"
    echo -e "${BLUE}Monitoring for Spotify startup/shutdown...${NC}"
    echo -e "${YELLOW}Press Ctrl+C to stop${NC}"
    echo
    
    # Save monitor PID
    echo $$ > /tmp/spotify-monitor.pid
    
    while true; do
        local current_time
        current_time=$(date +%s)
        
        if is_spotify_running; then
            if [[ "$spotify_was_running" == false ]]; then
                echo -e "${GREEN}🎵 Spotify started - launching ad blocker${NC}"
                log "Spotify started"
                
                # Give Spotify a moment to fully initialize
                sleep 2
                start_ad_blocker
                spotify_was_running=true
            fi
        else
            if [[ "$spotify_was_running" == true ]]; then
                echo -e "${RED}🎵 Spotify stopped - stopping ad blocker${NC}"
                log "Spotify stopped"
                stop_ad_blocker
                spotify_was_running=false
            fi
        fi
        
        # Show status every 60 seconds
        if [[ $((current_time - last_status_time)) -gt 60 ]]; then
            log "Status check - Spotify: $spotify_was_running, Ad blocker: $(is_ad_blocker_running && echo "running" || echo "stopped")"
            last_status_time="$current_time"
        fi
        
        sleep "$CHECK_INTERVAL"
    done
}

# Usage information
show_usage() {
    echo "Spotify Monitor and Ad Blocker Manager"
    echo "Automatically manages NoSpotifyAds based on Spotify status"
    echo
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help          Show this help message"
    echo "  -s, --status        Show current status"
    echo "  -d, --daemon        Run as daemon (for systemd service)"
    echo "  -k, --kill          Stop all components (monitor and ad blocker)"
    echo "  -i, --install       Create systemd service for auto-start"
    echo "  -l, --log           Show recent log entries"
    echo "  --set-script PATH   Set custom path to NoSpotifyAds script"
    echo
    echo "Files:"
    echo "  Ad Blocker Script: $AD_BLOCKER_SCRIPT"
    echo "  Log File: $LOG_FILE"
    echo "  PID File: $PID_FILE"
    echo
    echo "Examples:"
    echo "  $0                  # Start monitoring (interactive)"
    echo "  $0 --daemon         # Start monitoring (background)"
    echo "  $0 --status         # Check current status"
    echo "  $0 --install        # Set up auto-start service"
    echo "  $0 --kill           # Stop everything"
}

# Command line argument handling
case "${1:-}" in
    -h|--help)
        show_usage
        exit 0
        ;;
    -s|--status)
        show_status
        exit 0
        ;;
    -d|--daemon)
        # Run as daemon (redirect output to log)
        exec >> "$LOG_FILE" 2>&1
        monitor_spotify
        ;;
    -k|--kill)
        echo "Stopping Spotify Monitor and Ad Blocker..."
        
        # Stop ad blocker
        if [[ -f "$PID_FILE" ]]; then
            stop_ad_blocker
        fi
        
        # Stop monitor
        if [[ -f "/tmp/spotify-monitor.pid" ]]; then
            local monitor_pid
            monitor_pid=$(cat /tmp/spotify-monitor.pid)
            if ps -p "$monitor_pid" > /dev/null 2>&1; then
                kill "$monitor_pid" 2>/dev/null
                echo "Monitor stopped"
            fi
            rm -f /tmp/spotify-monitor.pid
        fi
        
        echo "All components stopped"
        exit 0
        ;;
    -i|--install)
        create_systemd_service
        exit 0
        ;;
    -l|--log)
        echo "Recent log entries from: $LOG_FILE"
        echo "========================================"
        if [[ -f "$LOG_FILE" ]]; then
            tail -20 "$LOG_FILE"
        else
            echo "No log file found yet"
        fi
        exit 0
        ;;
    --set-script)
        if [[ -n "$2" && -f "$2" ]]; then
            AD_BLOCKER_SCRIPT="$2"
            echo "Ad blocker script path set to: $AD_BLOCKER_SCRIPT"
            shift 2
        else
            echo "Error: Please provide a valid script path"
            exit 1
        fi
        ;;
    "")
        # Default: start interactive monitoring
        show_status
        echo
        monitor_spotify
        ;;
    *)
        echo "Unknown option: $1"
        show_usage
        exit 1
        ;;
esac
